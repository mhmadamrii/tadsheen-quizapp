// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Quiz          Quiz[]
    Submission    Submission[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Quiz {
    id         String       @id @default(cuid())
    title      String
    language   String?
    createdBy  String       @map("userId") // Foreign key for the User model
    user       User         @relation(fields: [createdBy], references: [id])
    questions  Question[]
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    Submission Submission[]
}

model Question {
    id      String   @id @default(cuid())
    quizId  String
    quiz    Quiz     @relation(fields: [quizId], references: [id])
    text    String
    options Option[]
    Answer  Answer[]
}

model Option {
    id         String   @id @default(cuid())
    questionId String
    question   Question @relation(fields: [questionId], references: [id])
    text       String
    isCorrect  Boolean // Indicates whether this is the correct answer
    Answer     Answer[]
}

model Submission {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    quizId      String
    quiz        Quiz     @relation(fields: [quizId], references: [id])
    score       Int
    answers     Answer[]
    submittedAt DateTime @default(now())
}

model Answer {
    id               String     @id @default(cuid())
    submissionId     String
    submission       Submission @relation(fields: [submissionId], references: [id])
    questionId       String
    question         Question   @relation(fields: [questionId], references: [id])
    selectedOptionId String
    selectedOption   Option     @relation(fields: [selectedOptionId], references: [id])
}
